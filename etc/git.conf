# A handler for git clones.

lib =
    # Load git utilities
    source "$HOME/.mr/lib/git-util.sh"


git_test =
        git_is_root "$MR_REPO" && ! git_annex_is_root "$MR_REPO" && ! arch_is_package "$MR_REPO" && ! unison_is_root "$MR_REPO" 

git_skip =
        git_skip "$MR_REPO" "$@"
               
git_fetch =
        if [ "$(git_remotes "$MR_REPO")" ]; then
            git fetch --all --prune --tags "$@"
        else
            warning "There are no remotes to fetch"
        fi

git_update =
        if [ "$(git_tracking_branch "$MR_REPO")" ]; then
            git pull "$@"
        else
           warning "Current branch is not tracking a remote"
           git fetch --all --prune --tags "$@"
        fi

git_sync =
        git pull "$@"
        git push "$@"

git_status =
        git status -s "$@" || true
        git --no-pager log --branches --not --remotes --simplify-by-decoration --decorate --oneline || true

git_commit =
        git commit -a "$@"

git_push =
        git push "$@"

git_pull =
        git pull "$@"

git_diff =
        git diff "$@"

git_log =
        git log "$@"

git_grep =
        git grep "$@"

git_register = 
        local url="`LC_ALL=C git config --get remote.origin.url`" || true
        if [ -z "$url" ]; then
            error "cannot determine git url"
        fi
        echo "Registering git url: $url in $MR_CONFIG"
        mr -c "$MR_CONFIG" config "`pwd`" checkout="git clone '$url' '$MR_REPO'"

git_trusted_checkout =
        git clone $url $repo

git_gc =
        git gc "$@"

git_clean =
        if [ "$1" = "-f" ]; then
            shift
            git clean -dx --force "$@"
        else
            git clean -dx --dry-run "$@"
	fi
