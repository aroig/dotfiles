# A handler for arch linux source package dirs

lib=
    # Some paths
    MR_BUILD_PATH="$AB2_BUILD_DIR/arch"
    MR_ARCH_REPOS="$AB2_REPOS_DIR"
    # Variables
    archlist=('x86_64')
    # Load some miscelania utilities
    source "$HOME/.mr/lib/git-util.sh"
    source "$HOME/.mr/lib/arch-util.sh"    
    ## 
    # package_repo <path>
    # Get the repo a package belongs
    ##
    package_repo() {
        local srcpath="$(readlink -f "$1")"            
        local srcdir="$(dirname "$srcpath")"
        echo "$(basename "$srcdir")"
    }
    ##
    # repodir_path <repo>
    # Get the path of the repository.
    ##
    repodir_path() {
        local reponame="$1"
        echo "$MR_ARCH_REPOS/$reponame"
    }
    ##
    # builddir_path <path>
    # Get the path of the directory where the package will be built.
    ##
    builddir_path() {
        # need to dereference symlinks! Otherwise subtle crap may happen when
        #  building stuff. For instance, emacs gets the autoloads paths wrong       
        local builddir="$(readlink -f "$MR_BUILD_PATH")"
        local srcpath="$(readlink -f "$1")"
        local pkgname="$(basename "$srcpath")"
        # Error out if builddir does not exist
        if [ ! -d "$builddir" ]; then
            error "Build directory does not exist. Please create it: $builddir"
            exit 1
        fi   
        echo "$builddir/$pkgname"           
    }
    ##
    # prepare_build <path>
    # Prepares a package for building on the builddir
    # returns the path where the building will occur
    ##
    prepare_build() {
        local srcpath="$(readlink -f "$1")"
        local buildpath="$(builddir_path "$srcpath")"
        rsync -avz --exclude=.git "$srcpath/" "$buildpath/" > /dev/null
        echo "$buildpath"            
    }
    ##
    # pkgbuild_update_version <path>
    # Updates the PKGBUILD from the one on the build dir (for updated version)
    # It does so only for packages whose version gets updated dynamically
    ##
    pkgbuild_update_version() {
        local srcpath="$(readlink -f "$1")"
        local buildpath="$(builddir_path "$srcpath")"
        local reponame="$(package_repo "$1")"           
        if pkgbuild_has_dynamic_version "$srcpath" && [ -f "$buildpath/PKGBUILD" ]; then
            local newver="$(pkgbuild_parse "$buildpath/PKGBUILD" pkgver)"
            pkgbuild_bump_version "$srcpath" "$newver"
        fi 
    }


arch_package_test=
        arch_is_package "$MR_REPO"

arch_package_download=
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        pkgname="$(basename "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        package_download "$buildpath"               

arch_package_build= 
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        pkgname="$(basename "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        package_build "$buildpath" "$@"
        pkgbuild_update_version "$srcpath"

arch_package_rebuild= 
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        if [ -d "$buildpath" ]; then
            rm -Rf "$buildpath"
        fi
        buildpath="$(prepare_build "$srcpath")"
        package_build "$buildpath" "$@"
        pkgbuild_update_version "$srcpath"

arch_package_repackage= 
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        package_repackage "$buildpath"
        pkgbuild_update_version "$srcpath"

arch_package_repoadd =
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        reponame="$(package_repo "$MR_REPO")"
        repopath="$(repodir_path "$reponame")"
        for arch in "${archlist[@]}"; do
            repo_add_packages "$buildpath" "$repopath" "$arch"
        done

arch_package_repodel =
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        reponame="$(package_repo "$MR_REPO")"
        repopath="$(repodir_path "$reponame")"
        for arch in "${archlist[@]}"; do
            repo_remove_packages "$buildpath" "$repopath" "$arch"
        done

arch_package_install= 
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        package_install "$buildpath"

arch_package_installdeps=
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        package_install_deps "$buildpath"

arch_package_bump=
        srcpath="$PWD"
        package_check_directory "$srcpath"
        pkgbuild_bump_pkgrel "$srcpath"

arch_package_bumpver=
        srcpath="$PWD"
        package_check_directory "$srcpath"
        if pkgbuild_has_dynamic_version "$srcpath"; then
            buildpath="$(prepare_build "$srcpath")"
            package_download "$buildpath"
            pkgbuild_update_version "$srcpath"
        fi               
        
arch_package_update=
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        reponame="$(package_repo "$MR_REPO")"
        repopath="$(repodir_path "$reponame")"              
        # if package has dynamic version, we need the sources to compute the version!
        if pkgbuild_has_dynamic_version "$srcpath"; then
            package_download "$buildpath"
        fi               
        if [ -z "$(repo_outdated_packages "$buildpath" "$repopath")" ]; then
            info "Package is up to date. No need to rebuild."
        else
            package_build "$buildpath" "$@"
            for arch in "${archlist[@]}"; do            
                repo_add_packages "$buildpath" "$repopath" "$arch"
            done
        fi
        pkgbuild_update_version "$srcpath"  

arch_package_pull=
        srcpath="$PWD"
        package_pull_sources "$srcpath"

arch_package_changelog=
        srcpath="$PWD"        
        package_print_changelog "$srcpath"

arch_package_ichangelog=
        srcpath="$PWD"        
        pkgname="$(basename "$srcpath")"
        if pacman -Qqu | grep "$pkgname" > /dev/null; then
            package_print_changelog "$srcpath"
            read -p "Return to continue." ret
        fi

arch_package_builddir=
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        if [ -e "$buildpath" ]; then
            echo "Opening build directory: $buildpath"
            rifle -p terminal "$buildpath"
        else
            error "Can't find local build directory"
            exit 1
        fi

arch_package_srcdir=
        srcpath="$PWD"
        srcrepo="$(pkgbuild_sources "$srcpath" | head -1 | sed 's|^.*file://\(.*\)$|\1|')"
        if [ -e "$srcrepo" ]; then
            echo "Opening source directory: $srcrepo"
            rifle -p terminal "$srcrepo"
        else
            error "Can't find local sources"
            exit 1
        fi
