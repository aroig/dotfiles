# A handler for arch linux source package dirs

lib=
    # Some paths
    MR_BUILD_PATH="$AB2_BUILD_DIR/arch"
    MR_ARCH_REPOS="$AB2_REPOS_DIR"
    # Variables
    archlist=('x86_64')
    # Load git, and arch PKGBUILD functions
    source "$HOME/.mr/lib/git.sh"
    source "$HOME/.mr/lib/arch.sh"
    source "$HOME/.mr/lib/arch-util.sh"

arch_package_test=
        arch_is_package "$MR_REPO"

arch_package_download=
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        pkgname="$(basename "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        package_download "$buildpath"               

arch_package_build= 
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        pkgname="$(basename "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        package_build "$buildpath" "$@"

arch_package_check= 
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        pkgname="$(basename "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        package_check "$buildpath" "$@"

arch_package_rebuild= 
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        if [ -d "$buildpath" ]; then
            rm -Rf "$buildpath"
        fi
        buildpath="$(prepare_build "$srcpath")"
        package_build "$buildpath" "$@"

arch_package_repackage= 
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        reponame="$(package_repo "$srcpath")"
        package_repackage "$buildpath"

arch_package_repoadd =
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        reponame="$(package_repo "$MR_REPO")"
        repopath="$(repodir_path "$reponame")"
        for arch in "${archlist[@]}"; do
            repo_add_packages "$buildpath" "$repopath" "$arch"
        done

arch_package_repodel =
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        reponame="$(package_repo "$MR_REPO")"
        repopath="$(repodir_path "$reponame")"
        for arch in "${archlist[@]}"; do
            repo_remove_packages "$buildpath" "$repopath" "$arch"
        done

arch_package_install= 
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        package_install "$buildpath"

arch_package_installdeps=
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(builddir_path "$srcpath")"
        package_install_deps "$buildpath"

arch_package_bump=
        srcpath="$PWD"
        package_check_directory "$srcpath"
        if ! pkgbuild_update_version "$srcpath"; then
            pkgbuild_bump_pkgrel "$srcpath"
        fi

arch_package_bumpver=
        srcpath="$PWD"
        package_check_directory "$srcpath"
        pkgbuild_update_version "$srcpath"
        
arch_package_update=
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        reponame="$(package_repo "$MR_REPO")"
        repopath="$(repodir_path "$reponame")"              
        # if package has dynamic version, we need the sources to compute the version!
        if pkgbuild_has_dynamic_version "$srcpath"; then
            package_download "$buildpath"
        fi               
        if [ -z "$(repo_outdated_packages "$buildpath" "$repopath")" ]; then
            info "Package is up to date. No need to rebuild."
        else
            package_build "$buildpath" "$@"
            for arch in "${archlist[@]}"; do            
                repo_add_packages "$buildpath" "$repopath" "$arch"
            done
        fi
        pkgbuild_update_version "$srcpath"  

arch_package_pull=
        srcpath="$PWD"
        package_pull_sources "$srcpath"

arch_package_changelog=
        srcpath="$PWD"        
        package_print_changelog "$srcpath"

arch_package_ichangelog=
        srcpath="$PWD"        
        pkgname="$(basename "$srcpath")"
        if pacman -Qqu | grep "$pkgname" > /dev/null; then
            package_print_changelog "$srcpath"
            read -p "Return to continue." ret
        fi

arch_package_builddir=
        srcpath="$PWD"
        package_check_directory "$srcpath"
        buildpath="$(prepare_build "$srcpath")"
        if [ -e "$buildpath" ]; then
            echo "Opening build directory: $buildpath"
            rifle -p terminal "$buildpath"
        else
            error "Can't find local build directory"
            exit 1
        fi

arch_package_srcdir=
        srcpath="$PWD"
        srcrepo="$(pkgbuild_sources "$srcpath" | head -1 | sed 's|^.*file://\(.*\)$|\1|')"
        if [ -e "$srcrepo" ]; then
            echo "Opening source directory: $srcrepo"
            rifle -p terminal "$srcrepo"
        else
            error "Can't find local sources"
            exit 1
        fi
