#!/usr/bin/bash

source "/etc/shellrc.d/git-prompt.sh"
source "/etc/shellrc.d/vcs.sh"
source "/etc/shellrc.d/prompt.sh"

blue="$(tput bold)$(tput setaf 4)"
reset="$(tput sgr0)"

abdo_vcs_dirinfo() {
    local dir=$(realpath "$1")
    local dirname=$(realpath --relative-to=. "$dir")
    local vcs_status git_status annex_status

    (
        cd "$dir";
        local vcs=$(abdo_get_vcs "$dir")
        if [ "$vcs" ]; then
            vcs_status=$(abdo_prompt_vcs "%s")
            vcs_status="${vcs_status@P}"

            if [[ "$vcs" =~ ^(git|annex)$ ]]; then
                git_status=$(git --no-pager log -n 1 \
                                 --pretty="format:%C(blue)%ad%C(reset) %C(green)%an%C(reset). %s" \
                                 --date="format:%Y-%m-%d %H:%M")
            fi

            # too slow
            # if [ "$vcs" = "annex" ]; then
            #     annex_status=$(abdo_prompt_annex)
            # fi

            local vcs_status_stripped=$(printf "%s" "${vcs_status}" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g")
            (( left_len = 35 - "${#dirname}" - "${#vcs_status_stripped}" ))
            local align_space=$(printf " %.0s" $(seq 1 "$left_len"))

            printf "%s %s- %s\n" "${vcs_status} ${blue}${dirname}${reset}" "${align_space}" "${git_status}"
        fi
    )
}

# do a ls with additional git status details.
if [ -n "$1" ]; then
    list=("$@")
else
    list=(".")
fi

for arg in "${list[@]}"; do
    if [ -d "$arg" ]; then
        find "$arg" -mindepth 1 -maxdepth 1 -type d -not -path '*/\.*' | \
        while read -r dir; do
            abdo_vcs_dirinfo "$dir"
        done
    fi
done

