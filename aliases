#!/bin/zsh

#------------------------------------------------------------------#
# File:     alias.sh   Aliases                                     #
# Version:                                                         #
# Author:   Abd√≥ Roig-Maranges <abdo.roig@gmail.com>               #
#------------------------------------------------------------------#


#------------------------------
# Coloring stuff
#------------------------------
alias ls='ls --color=auto -F'
alias ll='ls++ --potsf'
alias diff='diff -u -d'
alias top='htop'
alias tree='tree -C'
alias df='dfc'
alias du='cdu -dLh -i'
alias alsi='alsi -a -u'
alias grep='grep --color=auto'

# alias ping='$HOME/Software/conf/color-wrappers/ping'
# alias unisonb='$HOME/Software/conf/color-wrappers/unison -batch'


#------------------------------
# Compatibility aliases
#------------------------------
alias less=vimpager
alias zless=vimpager


#------------------------------
# Wine aliases
#------------------------------
alias kindle='wine "$HOME/.wine/drive_c/Program Files (x86)/Amazon/Kindle/Kindle.exe"'
alias digitaleditions='wine "$HOME/.wine/drive_c/Program Files (x86)/Adobe/Adobe Digital Editions/digitaleditions.exe"'

#------------------------------
# Utility aliases
#------------------------------
alias trash='gvfs-trash'
alias vp='vimpager'
alias rsy='rsync -avz --progress --delete'
alias ediff='emacs -diff'

alias ahi='asym hi'
alias abye='asym bye'

alias feh='feh --magick-timeout 2 --fontpath /usr/share/fonts/TTF/ --font DejaVuSans/10'
alias ipy='ipython'
alias ipy2='ipython2'

alias wee='weechat-curses'

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."


#------------------------------
# Systemd aliases
#------------------------------
run_with_journal() {
    setopt localoptions nomonitor # disable monitored job control
    _jctlargs=(--quiet --follow --output=cat --lines=0)
    
    if [ "$1" = "sudo" ]; then sudo journalctl $_jctlargs[@] &
    else                       journalctl $_jctlargs[@] &
    fi
    _jrnl_pid=$!

    $@; _cmd_exitval=$?; sleep 0.3
    kill -s TERM $_jrnl_pid;
    wait $_jrnl_pid; sleep 0.3
    return $_cmd_exitval
}

jctl() { sudo journalctl --since=yesterday $@ }

sctl() {
    case "$1" in
        start|stop) run_with_journal sudo systemctl --system $@   ;;
        *)          sudo systemctl --system $@                    ;;
    esac
       
 }
compdef sctl=systemctl

nctl() {
    case "$1" in
        start|stop|switch-to)  run_with_journal sudo netctl $@    ;;
        *)                     sudo netctl $@                     ;;
    esac
 }
compdef nctl=netctl

uctl() {
    case "$1" in
        start|stop)  run_with_journal systemctl --user $@         ;;
        *)           systemctl --user $@                          ;;
    esac
}
compdef uctl=systemctl

actl() {
    cmd="$1"; shift
    if [ "$cmd" = "dot" ]; then systemd-analyze dot "$@" | dot -Tsvg
    else                        systemd-analyze "$cmd" "$@"
    fi
}

alias lock='systemctl --user lock.target'


#------------------------------
# text manipulation
#------------------------------

# remove trailing newline.
trimtrail() {
    cat "$1" | awk '{a = $0; while (getline > 0) {print a; a = $0}} END {printf("%s", a)}' -
}


#------------------------------
# development
#------------------------------

case $(hostname -s) in
    grothendieck)
        threads=10
        ;;
    galois|hodge)
        threads=3
        ;;
    *)
        threads=1
        ;;
esac

alias pmake="colormake -j$threads"
alias gan="git annex"


#------------------------------
# Sudo aliases
#------------------------------

# If the argument has an alias, expand it, if it has a function, run it on a root shell
# and if no arguments given, go to a root prompt.
sudo () {
    sudo=/usr/bin/sudo
    sudo_pr=$(echo -n -e "\e[31m[sudo]\e[0m password for %u: ")
    
    if [[ -n "$1" ]]; then
        if [[ -n "${=aliases[$1]}" ]]; then
            $sudo -p "$sudo_pr" ${=aliases[$1]} $argv[2,-1]
        elif [[ -n "${=functions[$1]}" ]]; then
            # TODO: need to escape $argv
            $sudo -p "$sudo_pr" zsh -ic "$argv"
        else
            $sudo -p "$sudo_pr" $argv
        fi
    else
        $sudo -p "$sudo_pr" zsh
    fi
}

# alias sudo='sudo '        # Enables expanding aliases for next command. not functions though :(


#------------------------------
# Program shortcuts
#------------------------------

vi()  { eval "$EDITOR \"\$@\""; }
op()  { xdg-open "$@" &> /dev/null &!; }


# The following commands are aware of the type of terminal they are on. For
# example ed launches GTK emacs on any terminal except tty's or remote logins

ee() {
    case "$TERM" in
        screen*|linux*) eval "emacsclient -t -a emacs  \"\$@\" > /dev/null" ;;
        *)              eval "emacsclient -c -a emacs  \"\$@\" > /dev/null &!" ;;
    esac
}

kle() {
    case "$TERM" in
        screen*|linux) eval "emacsclient -eval \"(client-save-kill-emacs)\" &> /dev/null"  ;;
        *)             eval "emacsclient --display=:0 --eval \"(client-save-kill-emacs)\" &> /dev/null \"\$@\" &!" ;;
    esac
}

tx() {
    if [ "$TMUX" ]; then   tmux new-window
    else                   tmux-session term
    fi
}

tm()  {
    case "$TERM" in
        screen*|linux) tx ;;
        *)             eval "$TERMCMD -cd \"\$PWD\" \"\$@\" &!" ;;
    esac
}

rg()  {
    case "$TERM" in
        screen*|linux) eval "ranger \"\$@\"" ;;
        *)             eval "$TERMCMD -cd \"\$PWD\" -e ranger \"\$@\" &!" ;;
    esac
}

fm()  {
    case "$TERM" in
        screen*|linux) eval "ranger \"\$@\"" ;;
        *)             eval "$FILEMANAGER \"\$@\" &> /dev/null &!" ;;
    esac
}



# These commands open awesome dropdown clients
rgd() { echo "ddclient.ranger:newtab('$PWD')"   | awesome-client; }
tmd() { echo "ddclient.terminal:newtab('$PWD')" | awesome-client; }




#------------------------------
# Rebooting and halting
#------------------------------

# stx() { startx awesome -- vt$(fgconsole 2>/dev/null); }
stx() {
    if [ ! $1 ]; then
        wm=awesome
    else
        wm="$1"
    fi
    systemctl --user start wm@$wm.target;
}

klx() { 
    systemctl --user stop xserver@0.target;
}

# NOTE
# If I use systemctl --user exit, the user session tries to perform a pam_close_session, but this is
# not allowed. Only root can do it, and in the same process as the pam_open_session
# source: https://bugzilla.redhat.com/show_bug.cgi?format=multiple&id=951728
#
# On the other hand, If I use sudo systemctl stop user-sessions@abdo, some process remain and I have
# to wait for the timeout

reboot()   { systemctl --user exit; sudo systemctl reboot;   }
poweroff() { systemctl --user exit; sudo systemctl poweroff; }
suspend()  { sudo systemctl suspend;  }

